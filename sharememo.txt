Twitterbot(ジゴロ進行)

===========
step0
===========
curlコマンドでtwitterAPIリクエスト

■Twitter APIドキュメント
https://developer.twitter.com/ja/docs

■ユーザー情報取得API
Sample code
If you are interested in using some simple code to make your request, we’ve put together sample code in multiple different languages for each of our Twitter API v2 endpoints. 
You can find the code samples via our Github repo, Twitter-API-v2-sample-code, which also contains a README file that you can use to learn how to set up your credentials to properly work with the requests. 
For example, here is a cURL example for the user lookup endpoint. All you have to do to use this request is replace the $ACCESS_TOKEN and $USERNAME with your App Access Token and Twitter handle. Then, copy and paste this code into your command line tool and press ‘Return’ or ‘Enter’.

curl "https://api.twitter.com/2/users/by/username/$USERNAME" -H "Authorization: Bearer $ACCESS_TOKEN"

■Twitter API v2 を使ってツイートしてみた
　https://ohwhsmm7.blog.fc2.com/blog-entry-602.html?sp

取得したユーザーIDを使い、タイムラインに流れたツイートを取得
    curl -X GET -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" -H "Authorization: Bearer <Bearer Token>" https://api.twitter.com/2/users/:id/tweets

■PKCEの解説（by Yahoo）
https://techblog.yahoo.co.jp/entry/20191219790463/

https://twitter.com/i/oauth2/authorize?response_type=code&client_id=<Client ID>&redirect_uri=https://twitter.com/&scope=tweet.read%20tweet.write%20offline.access&state=<state>&code_challenge=<

■Twitter API Reference
https://developer.twitter.com/ja/docs/basics/authentication/api-reference/request_token

===========
step1
===========
■機能
Web画面からTwitter API経由でtweetをPostする
■成果物
index.html
app.js
auth.dat(認証認可情報を入れる)


===========
step2
===========
■機能
jsonに登録したtweetのテンプレート内容を画面から選択出来る様にして、twitter API経由でtweetをpostする。
■成果物
index.html
app.js
auth.dat(認証認可情報を入れる)
tweet.json

===========
step3
===========
■機能
jsonに登録した内容をmysqlに移行し、tweetテンプレートの内容をAPIから呼び出す仕組みを構築する。
getした内容を画面から選択出来る様にして、twitter API経由でtweetをpostする。

■成果物
index.html
app.js
auth.dat(認証認可情報を入れる)
tweet.json
node.js
mysql
AWS

===========
step4
===========
■機能
node.jsでサーバサイドで動くようにして、bot化する

■成果物


===========
step5
===========
■機能
mysqlへの登録を画面からAPI経由で、Postする機能を追加する。


==============================
■Gitコマンド
==============================
git pull origin master

git add .

git commit -m "step0 curlでAPIリクエスト（途中）"

git push origin master


============================================================
【Git】ローカルブランチとリモートブランチの差分を表示させるコマンド集
https://qiita.com/C_HERO/items/b0971da170c8142b69e9
============================================================
1. リモートリポジトリの変更履歴の取得

> git fetch origin リモートブランチ名
【例】
> git fetch origin master

(1) git diff


2. ローカルブランチとリモートブランチの差分を表示させる
差分のあるファイル（とその内容）を表示させる
①オーソドックスなコマンド

> git diff ローカルブランチ名 origin/リモートブランチ名
【例】
> git diff master origin/master
②サマリを表示

> git diff --stat ローカルブランチ名 origin/リモートブランチ名
【例】
> git diff --stat master origin/master
③差分のあるファイル名を表示

> git diff --name-status ローカルブランチ名 origin/リモートブランチ名
【例】
> git diff --name-status master origin/master


(2) git log

コミットハッシュ値の現在地（ローカルブランチとリモートブランチそれぞれ）を表示させる
①オーソドックスなコマンド

> git log ローカルブランチ名 origin/リモートブランチ名
【例】
> git log master origin/master
②1コミット1行で表示


> git log --oneline ローカルブランチ名 origin/リモートブランチ名
【例】
> git log --oneline master origin/master

